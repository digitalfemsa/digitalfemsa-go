/*
Femsa API

Femsa sdk

API version: 2.1.0
Contact: engineering@femsa.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package digitalfemsa

import (
	"encoding/json"
	"fmt"
)

// checks if the OrdersResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OrdersResponse{}

// OrdersResponse struct for OrdersResponse
type OrdersResponse struct {
	Data                 []OrderResponse `json:"data"`
	AdditionalProperties map[string]interface{}
}

type _OrdersResponse OrdersResponse

// NewOrdersResponse instantiates a new OrdersResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOrdersResponse(data []OrderResponse) *OrdersResponse {
	this := OrdersResponse{}
	this.Data = data
	return &this
}

// NewOrdersResponseWithDefaults instantiates a new OrdersResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOrdersResponseWithDefaults() *OrdersResponse {
	this := OrdersResponse{}
	return &this
}

// GetData returns the Data field value
func (o *OrdersResponse) GetData() []OrderResponse {
	if o == nil {
		var ret []OrderResponse
		return ret
	}

	return o.Data
}

// GetDataOk returns a tuple with the Data field value
// and a boolean to check if the value has been set.
func (o *OrdersResponse) GetDataOk() ([]OrderResponse, bool) {
	if o == nil {
		return nil, false
	}
	return o.Data, true
}

// SetData sets field value
func (o *OrdersResponse) SetData(v []OrderResponse) {
	o.Data = v
}

func (o OrdersResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OrdersResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["data"] = o.Data

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *OrdersResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"data",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varOrdersResponse := _OrdersResponse{}

	err = json.Unmarshal(data, &varOrdersResponse)

	if err != nil {
		return err
	}

	*o = OrdersResponse(varOrdersResponse)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "data")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableOrdersResponse struct {
	value *OrdersResponse
	isSet bool
}

func (v NullableOrdersResponse) Get() *OrdersResponse {
	return v.value
}

func (v *NullableOrdersResponse) Set(val *OrdersResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableOrdersResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableOrdersResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOrdersResponse(val *OrdersResponse) *NullableOrdersResponse {
	return &NullableOrdersResponse{value: val, isSet: true}
}

func (v NullableOrdersResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOrdersResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
