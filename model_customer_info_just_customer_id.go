/*
Femsa API

Femsa sdk

API version: 2.1.0
Contact: engineering@femsa.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package digitalfemsa

import (
	"encoding/json"
	"fmt"
)

// checks if the CustomerInfoJustCustomerId type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CustomerInfoJustCustomerId{}

// CustomerInfoJustCustomerId struct for CustomerInfoJustCustomerId
type CustomerInfoJustCustomerId struct {
	CustomerId           string `json:"customer_id"`
	AdditionalProperties map[string]interface{}
}

type _CustomerInfoJustCustomerId CustomerInfoJustCustomerId

// NewCustomerInfoJustCustomerId instantiates a new CustomerInfoJustCustomerId object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCustomerInfoJustCustomerId(customerId string) *CustomerInfoJustCustomerId {
	this := CustomerInfoJustCustomerId{}
	this.CustomerId = customerId
	return &this
}

// NewCustomerInfoJustCustomerIdWithDefaults instantiates a new CustomerInfoJustCustomerId object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCustomerInfoJustCustomerIdWithDefaults() *CustomerInfoJustCustomerId {
	this := CustomerInfoJustCustomerId{}
	return &this
}

// GetCustomerId returns the CustomerId field value
func (o *CustomerInfoJustCustomerId) GetCustomerId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CustomerId
}

// GetCustomerIdOk returns a tuple with the CustomerId field value
// and a boolean to check if the value has been set.
func (o *CustomerInfoJustCustomerId) GetCustomerIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CustomerId, true
}

// SetCustomerId sets field value
func (o *CustomerInfoJustCustomerId) SetCustomerId(v string) {
	o.CustomerId = v
}

func (o CustomerInfoJustCustomerId) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CustomerInfoJustCustomerId) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["customer_id"] = o.CustomerId

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *CustomerInfoJustCustomerId) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"customer_id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCustomerInfoJustCustomerId := _CustomerInfoJustCustomerId{}

	err = json.Unmarshal(data, &varCustomerInfoJustCustomerId)

	if err != nil {
		return err
	}

	*o = CustomerInfoJustCustomerId(varCustomerInfoJustCustomerId)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "customer_id")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableCustomerInfoJustCustomerId struct {
	value *CustomerInfoJustCustomerId
	isSet bool
}

func (v NullableCustomerInfoJustCustomerId) Get() *CustomerInfoJustCustomerId {
	return v.value
}

func (v *NullableCustomerInfoJustCustomerId) Set(val *CustomerInfoJustCustomerId) {
	v.value = val
	v.isSet = true
}

func (v NullableCustomerInfoJustCustomerId) IsSet() bool {
	return v.isSet
}

func (v *NullableCustomerInfoJustCustomerId) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCustomerInfoJustCustomerId(val *CustomerInfoJustCustomerId) *NullableCustomerInfoJustCustomerId {
	return &NullableCustomerInfoJustCustomerId{value: val, isSet: true}
}

func (v NullableCustomerInfoJustCustomerId) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCustomerInfoJustCustomerId) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
